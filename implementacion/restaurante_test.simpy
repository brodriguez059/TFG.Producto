
%option n_sims = 30

%{
    import random
%}

%in capacidad = 25
%in tp_dur_estancia_media = 90
%in tp_dur_estancia_dsvtip = 20
%in tp_abierto = 300
%in tp_entrellegada = 15
%in gasto_persona_media = 25
%in gasto_persona_dsvtip = 3

%state libres = 0

%count gasto = 0.0
%count gasto_total = 0.0

%%

Metric gasto_total_calc{
    return gasto_total
}

Stop condition{
    return (clock >= tp_abierto)
}

Event Inicio{
    gasto_total = 0.0
    libres = capacidad
    Spawn(clock + exp(tp_entrellegada), Llegada)
    Spawn(clock + tp_abierto, Fin)
}

Event Llegada{
    Spawn(clock + exp(tp_entrellegada), Llegada)
    grupo = generar_grupo()
    if(libres >= grupo):
        Spawn(clock + normal(tp_dur_estancia_media, tp_dur_estancia_dsvtip), Salida, {'grupo':grupo})
        libres = libres - grupo
        for i in range(grupo):
            gasto = normal(gasto_persona_media, gasto_persona_dsvtip)
            gasto_total = gasto_total + gasto
}

Event Salida{
    libres = libres + grupo
}

%%

def generar_grupo():
    return random.randint(1,4)